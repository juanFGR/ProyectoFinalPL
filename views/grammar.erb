<script type="text/javascript" src="path-to-mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
</script>
<script type="text/javascript"
  src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<br>
Recuerde que una gramática $G$ es una cuaterna $G =(\Sigma,V,P,S)$.
<ol>
  <li>$\Sigma$ es el conjunto de terminales. 
  <li>$V$ es un conjunto (disjunto de $\Sigma$) que se denomina conjunto de <i>variables sintácticas</i> o <i>categorías gramáticales</i>,
  <li>$P$ es un conjunto de pares de $V \times (V \cup \Sigma )^*$. En vez de escribir
  un par usando la notación $(A, \alpha) \in P$ se escribe $A \rightarrow \alpha$.
  Un elemento de $P$ se denomina producción. 
  <li>Por último, $S$ es un símbolo del conjunto
  $V$ que se denomina símbolo de arranque.
</ol>
<ol>
  <li> $\Sigma$ = { ; =, ID, PI, E, +, -, *, /, ^, !, %, (, ), NUMBER, VAR, PROCEDURE, IF, THEN, ELSE, CALL, P, 
  <l> WHILE, DO, BEGIN, END, ODD, COMMA, COLON } 
  <li> $V = \{ prog, const, vars, block, process, variables, constants, identificators, statements, statement, expressions \}$
  <li> Productions:
  <ol>
    <li>
<pre>
prog
    : fatherProcess constsvars block DOT EOF
    ;

fatherProcess
    : /* empty */ 
    ;

constsvars
    : consts vars
    ;

consts
    : CONST constants ';' consts
    | /* empty */
    ;

vars
    : VAR identificators ';' vars
    | /* empty */
    ; 

block 
    : process statements
    | statements
    ;

process
    : PROCEDURE idproc '(' variables ')' COLON constsvars block END ';'
    | PROCEDURE idproc COLON constsvars block END ';'
    | process PROCEDURE idproc '(' variables ')' COLON constsvars block END ';'
    | process PROCEDURE idproc COLON constsvars block END ';'
    ;

idproc
    : ID
    ;

variables
    : ID
    | variables COMMA ID
    ;

constants 
    : ID '=' NUMBER
    | constants COMMA ID '=' NUMBER
    ;

identificators
    : ID
    | identificators COMMA ID
    ;

statements
    : /* empty */
    | statement statements 
    ;

statement
    : ID '=' expression 
    | ID '=' expression ';'
    | IF condition THEN statements ELSE statements END ';'
    | IF condition THEN statements END ';'
    | CALL ID '(' variables ')' ';'  
    | CALL ID ';' 
    | P expression ';'
    | WHILE condition DO statements END ';'
    | BEGIN statements END ';'
    ;

condition
    : ODD expression
    | expression COMPARISION expression
    ;

expression
    : expression '+' expression
    | expression '-' expression
    | expression '*' expression
    | expression '/' expression
    | expression '^' expression
    | expression '!'
    | expression '%'
    | '-' expression %prec UMINUS
    | '(' expression ')'
    | NUMBER
    | E
    | PI
    | ID 
    ;

</pre>
  </ol>
  <li> Start symbol: $prog$
</ol>
<BR>
<BR>

